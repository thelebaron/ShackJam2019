using Unity.Burst;
using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using Unity.Transforms;

namespace Game.Modules.Transforms
{
    [UpdateInGroup(typeof(TransformSystemGroup))]
    public class MirrorTransformsSystem : JobComponentSystem
    {
        [BurstCompile]
        struct MirrorTranslationsJob : IJobForEach<MirrorTranslation, Translation>
        {
            [DeallocateOnJobCompletion][ReadOnly] public NativeArray<Translation> TranslationsStoreArray;
            [DeallocateOnJobCompletion][ReadOnly] public NativeArray<Entity> EntitiesStoreArray;

            public void Execute([ReadOnly] ref MirrorTranslation mirror, ref Translation translation)
            {
                for (int i = 0; i < EntitiesStoreArray.Length; i++)
                {
                    if (!EntitiesStoreArray[i].Equals(mirror.MirrorTarget)) continue;
                    
                    translation.Value = TranslationsStoreArray[i].Value;
                    break;
                    
                }
            }
        }
        [BurstCompile]
        struct MirrorRotationsJob : IJobForEach<MirrorRotation, Rotation>
        {
            [DeallocateOnJobCompletion][ReadOnly] public NativeArray<Rotation> RotationsStoreArray;
            [DeallocateOnJobCompletion][ReadOnly] public NativeArray<Entity>      EntitiesStoreArray;

            public void Execute([ReadOnly] ref MirrorRotation mirror, ref Rotation rotation)
            {
                for (int i = 0; i < EntitiesStoreArray.Length; i++)
                {
                    if (!EntitiesStoreArray[i].Equals(mirror.MirrorTarget)) continue;
                    
                    rotation.Value = RotationsStoreArray[i].Value;
                    break;
                    
                }
            }
        }
        
        
        private EntityQuery m_Query;
        private EntityQuery m_Query2;

        protected override void OnCreate()
        {
            base.OnCreate();

            m_Query = GetEntityQuery(typeof(Translation));
            m_Query2 = GetEntityQuery(typeof(Rotation));
        }

        protected override JobHandle OnUpdate(JobHandle inputDeps)
        {
            var translationsJob = new MirrorTranslationsJob
            {
                EntitiesStoreArray = m_Query.ToEntityArray(Allocator.TempJob),
                TranslationsStoreArray = m_Query.ToComponentDataArray<Translation>(Allocator.TempJob)
            };
            var mirrorTranslationsHandle = translationsJob.Schedule(this, inputDeps);
            
            var rotationsJob = new MirrorRotationsJob
            {
                EntitiesStoreArray     = m_Query2.ToEntityArray(Allocator.TempJob),
                RotationsStoreArray = m_Query2.ToComponentDataArray<Rotation>(Allocator.TempJob)
            };
            var mirrorRotationsHandle = rotationsJob.Schedule(this, mirrorTranslationsHandle);
            
            return mirrorRotationsHandle;
        }
    }
}
